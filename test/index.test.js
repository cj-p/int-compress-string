import {compress, decompress} from "../src";
import {expect} from "chai";

const test = originalArray => {
  const finalOutput = compress(originalArray);
  const decompressed = decompress(finalOutput);
  expect(originalArray).to.deep.equal(decompressed);
};

describe('compress-number-set', () => {
  it('small sequential', () => {
    test(new Array(100).fill().map((_, i) => i));
  })

  it('1 - 128 diff array', () => {
    test([
      0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 300, 325,
      351, 378, 406, 435, 465, 496, 528, 561, 595, 630, 666, 703, 741, 780, 820, 861, 903, 946, 990, 1035, 1081, 1128,
      1176, 1225, 1275, 1326, 1378, 1431, 1485, 1540, 1596, 1653, 1711, 1770, 1830, 1891, 1953, 2016, 2080, 2145, 2211,
      2278, 2346, 2415, 2485, 2556, 2628, 2701, 2775, 2850, 2926, 3003, 3081, 3160, 3240, 3321, 3403, 3486, 3570, 3655,
      3741, 3828, 3916, 4005, 4095, 4186, 4278, 4371, 4465, 4560, 4656, 4753, 4851, 4950, 5050, 5151, 5253, 5356, 5460,
      5565, 5671, 5778, 5886, 5995, 6105, 6216, 6328, 6441, 6555, 6670, 6786, 6903, 7021, 7140, 7260, 7381, 7503, 7626,
      7750, 7875, 8001, 8128
    ]);
  })

  it('sparse sequential', () => {
    test([
      100001, 100002, 100003, 100004, 100005, 100006, 100007, 100008, 100009, 2000010, 2000011, 2000012, 2000013,
      2000014, 2000015, 2000016, 2000017, 2000018, 2000019, 2000020, 3000021, 3000022, 3000023, 3000024, 3000025,
      3000026, 3000027, 3000028, 3000029, 3000030, 3000031, 4000032, 4000033, 4000034, 4000035, 4000036, 4000037,
      4000038, 4000039, 4000040
    ]);
  })

  it('big amounts of sequential', () => {
    test(new Array(10000).fill().map((_, i) => i));
  })

  it('big amounts of random', () => {
    test(new Array(10000).fill().map((_, i) => ~~(Math.random() * 10000)));
  })

  it('big integer', () => {
    test([Math.floor(Math.pow(64, 30))]);
  })
})